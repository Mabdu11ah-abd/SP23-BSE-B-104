<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%- pageTitle %></title>

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <!-- jQuery CDN -->
  <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
  <style>
    body {
      background-color: #121212;
      color: #ffffff;
    }
    .card {
      color: white;
      background-color: #1e1e1e;
      border: none;
      border-radius: 10px;
    }
    .card img {
      border-radius: 10px 10px 0 0;
    }
    .form-control, .form-select, .btn-dark {
      background-color: #2a2a2a;
      color: #ffffff;
      border: 1px solid #444;
    }
    .form-control::placeholder, .form-select {
      color: #b3b3b3;
    }
    .btn-dark:hover {
      background-color: #444;
      border-color: #666;
    }
    .input-group .form-control {
      border-radius: 0.5rem 0 0 0.5rem;
    }
    .input-group .btn {
      border-radius: 0 0.5rem 0.5rem 0;
    }
    .container-fluid {
      max-width: 600px; /* Adjusted width for forms */
    }
    .pagination .page-item.active .page-link {
      background-color: #444; /* Active page background */
      border-color: #666; /* Active page border */
    }
    .pagination .page-link {
      color: #ffffff; /* Page link text color */
      background-color: #2a2a2a; /* Dark background for links */
    }
    .pagination .page-link:hover {
      background-color: #444; /* Lighter background on hover */
    }
  </style>
</head>

<body>
  <h3><%- pageTitle %></h3>
  <a href="/admin/products/create" class="btn btn-dark btn-info">Create New Category</a>

  <div class="container m-2 p-2 d-flex flex-column justify-content-start">

    <div class="container">
      <div class="container-fluid d-flex flex-column justify-content-center">
        <form class="m-2 d-flex align-items-center gap-3" id="search-form">
          <input class="form-control mb-2" type="text" name="search" placeholder="Search">
          <button class="btn btn-dark mb-2" type="submit">Search</button>
        </form>
        
        <!-- Filter Form -->
        <form class="m-2 d-flex align-items-center gap-3" id="filter-form">
          <select class="form-select mb-2 w-50" name="category" id="category-select">
            <option value="">Select Category</option>
          </select>
          <input class="form-control mb-2 w-25" type="number" name="minPrice" placeholder="Min Price" />
          <input class="form-control mb-2 w-25" type="number" name="maxPrice" placeholder="Max Price" />
          <button class="btn btn-dark mb-2" type="submit">Filter</button>
        </form>
        
        <!-- Sort Form -->
        <form class="m-2 d-flex align-items-center gap-3" id="sort-form">
          <select class="form-select mb-2 w-50" name="sortBy">
            <option value="title">Title</option>
            <option value="price">Price</option>
          </select>
          <select class="form-select mb-2 w-50" name="sortOrder">
            <option value="asc">Ascending</option>
            <option value="desc">Descending</option>
          </select>
          <button class="btn btn-dark mb-2" type="submit">Sort</button>
        </form>
        
      </div>
  </div>

  <table class="table table-dark" id="product-table">
    <thead>
      <tr>
        <th>ID</th>
        <th>Title</th>
        <th>Price</th>
        <th>Category</th>
        <th>Description</th>
        <th>Image</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
  <div id="pagination"></div>

  <!-- Your custom JavaScript file -->
  <script>
    $(document).ready(function() {
      fetchProducts();
      fetchCategories();
    });

    async function fetchCategories() {
      try {
        const response = await fetch('/admin/api/categories');
        const categories = await response.json();
        console.log(categories);
        const categorySelect = $('#category-select');
        
        categories.forEach(category => {
          const option = new Option(category.name, category._id);
          categorySelect.append(option);
        });
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    }

    let queryParams = {
      search: "",
      category: "",
      minPrice: "",
      maxPrice: "",
      sortBy: "",
      sortOrder: "",
      page: 1,
    };

    // Search Form Submission
    $("#search-form").on("submit", function (e) {
      e.preventDefault();
      queryParams.search = $(this).find("[name='search']").val();
      queryParams.page = 1; // Reset to the first page on new search
      fetchProducts();
    });
    
    // Filter Form Submission
    $("#filter-form").on("submit", function (e) {
      e.preventDefault();
      queryParams.category = $(this).find("[name='category']").val();
      queryParams.minPrice = $(this).find("[name='minPrice']").val();
      queryParams.maxPrice = $(this).find("[name='maxPrice']").val();
      queryParams.page = 1; // Reset to the first page on new filter
      fetchProducts();
    });
    
    // Sort Form Submission
    $("#sort-form").on("submit", function (e) {
      e.preventDefault();
      queryParams.sortBy = $(this).find("[name='sortBy']").val();
      queryParams.sortOrder = $(this).find("[name='sortOrder']").val();
      queryParams.page = 1; // Reset to the first page on new sort
      fetchProducts();
    });

    function fetchProducts() {
      console.log("method has been called");
      $.ajax({
        url: "/admin/api/products",
        method: "GET",
        data: queryParams, // Send queryParams as the request data
        success: function (data) {
          renderProducts(data);
        },
        error: function (error) {
          console.error("Error fetching products:", error);
        },
      });
    }

    function renderProducts({ products, totalRecords, totalPages, page }) {
      queryParams.page = page; // Update the current page
      const tableBody = $("#product-table tbody");
      tableBody.empty();

      products.forEach((product) => {
        console.log(product);
        let imageHtml = "";
        if (product.image) {
          // Display the product image
          imageHtml = `<img src="${product.image}" alt="${product.title}" style="width: 100px; height: auto;">`;
        } else {
          imageHtml = "No image available";
        }

        tableBody.append(`
          <tr>
            <td>${product._id}</td>
            <td>${product.title}</td>
            <td>${product.price}</td>
            <td>${product.category ? product.category.name : "No category"}</td>
            <td>${product.description}</td>
            <td>${imageHtml}</td> <!-- Add image column -->
            <td>
              <a href="/admin/products/edit/${product._id}" class="btn btn-warning">Edit</a>
              <a href="/admin/products/delete/${product._id}" class="btn btn-danger">Delete</a>
            </td>
          </tr>
        `);
      });
      renderPagination(totalPages, page);
    }
    
    function renderPagination(totalPages, currentPage) {
      const paginationDiv = $("#pagination");
      paginationDiv.empty();

      const query = $.param({
        search: queryParams.search,
        category: queryParams.category,
        minPrice: queryParams.minPrice,
        maxPrice: queryParams.maxPrice,
        sortBy: queryParams.sortBy,
        sortOrder: queryParams.sortOrder,
        category: queryParams.category
      });

      const prevDisabled = currentPage === 1 ? "disabled" : "";
      const nextDisabled = currentPage === totalPages ? "disabled" : "";

      let paginationHtml = `<ul class="pagination justify-content-center">`;

      // Previous button
      paginationHtml += `
        <li class="page-item ${prevDisabled}">
          <a href="#" class="page-link" data-page="${currentPage - 1}">
            <span aria-hidden="true">&laquo;</span>
          </a>
        </li>`;

      // Page numbers
      for (let i = 1; i <= totalPages; i++) {
        const activeClass = i === currentPage ? "active" : "";
        paginationHtml += `
          <li class="page-item ${activeClass}">
            <a href="#" class="page-link" data-page="${i}">${i}</a>
          </li>`;
      }

      // Next button
      paginationHtml += `
        <li class="page-item ${nextDisabled}">
          <a href="#" class="page-link" data-page="${currentPage + 1}">
            <span aria-hidden="true">&raquo;</span>
          </a>
        </li>`;

      paginationHtml += `</ul>`;

      paginationDiv.html(paginationHtml);
    }

    // Pagination Click Handler
    $("#pagination").on("click", ".page-link", function (e) {
      e.preventDefault();
      queryParams.page = $(this).data("page");
      fetchProducts();
      fetchCategories();
    });
  </script>
</body>